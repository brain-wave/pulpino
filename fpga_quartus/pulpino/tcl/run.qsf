# quartus_sh -s
package require ::quartus::project
package require ::quartus::flow


# Paths
set PROJECT_DIR $env(PWD)
puts "PROJECT_DIR = ${PROJECT_DIR}"
set TB ${PROJECT_DIR}/../tb
set RTL ${PROJECT_DIR}/../rtl
set IPS ${PROJECT_DIR}/../ips
set FPGA_IPS ${PROJECT_DIR}/ips
set FPGA_RTL ${PROJECT_DIR}/rtl

set need_to_close_project 0
set make_assignments 1
set ::env(PULP_FPGA_EMUL) 1

# Configuration
if { ![info exists ::env(USE_ZERO_RISCY)] } {
  puts "USE_ZERO_RISCY = 0"
  set ::env(USE_ZERO_RISCY) 0
} else {
  puts "USE_ZERO_RISCY = 1"
}
if { ![info exists ::env(RISCY_RV32F)] } {
  puts "RISCY_RV32F = 0"
  set ::env(RISCY_RV32F) 0
} else {
  puts "RISCY_RV32F = 1"
}
if { ![info exists ::env(ZERO_RV32M)] } {
  puts "ZERO_RV32M = 0"
  set ::env(ZERO_RV32M) 0
} else {
  puts "ZERO_RV32M = 1"
}
if { ![info exists ::env(ZERO_RV32E)] } {
  puts "ZERO_RV32E = 0"
  set ::env(ZERO_RV32E) 0
} else {
  puts "ZERO_RV32E = 1"
}

if { $::env(USE_ZERO_RISCY)==1} {
    if {$::env(ZERO_RV32E)} {
          set NAME "MICRO_RISCY"
          puts "MICRO_RISCY COMPILATION"
    } else {
          set NAME "ZERO_RISCY"
          puts "ZERO_RISCY COMPILATION"
    }
} else {
    if {$::env(RISCY_RV32F)} {
          set NAME "RISCY_FP"
          puts "RISCY_FP COMPILATION"
    } else { 
          set NAME "RISCY"
          puts "RISCY COMPILATION"
    }
}


# Check that the right project is open
if {[is_project_open]} {
  if {[string compare $quartus(project) "pulpino"]} {
    puts "Project pulpino is not open"
    set make_assignments 0
  }
} else {
  # Only open if not already open
  if {[project_exists pulpino]} {
    project_open -revision pulpino_top pulpino
  } else {
    project_new -revision pulpino_top pulpino
  }
  set need_to_close_project 1
}

# make assignments
if {$make_assignments} {
    source ./pulpino/tcl/project_settings.tcl
    source ./pulpino/tcl/pin_assignments.tcl
    set_global_assignment -name SDC_FILE ./pulpino/tcl/constraints.sdc
    ###set_instance_assignment -name PARTITION_HIERARCHY root_partition -to | -section_id Top
    
    # set up meaningful errors
    ##source ../common/messages.tcl
    
    # Define source files
    source ./pulpino/tcl/src_files.tcl
    source ./pulpino/tcl/ips_inc_dirs.tcl
    source ./pulpino/tcl/ips_src_files.tcl

    # Add IPs and Testbench files
    source ./pulpino/tcl/ips_add_files.tcl
    source ./pulpino/tcl/tb_add_files.tcl
    
    # Add Pulpino files and memories
    if {$::env(USE_ZERO_RISCY)} {
        foreach sv_file $SRC_ZERORISCY_REGFILE_FPGA { set_global_assignment -name SYSTEMVERILOG_FILE $sv_file }
        foreach sv_file $SRC_ZERORISCY { set_global_assignment -name SYSTEMVERILOG_FILE $sv_file }
        foreach sv_file $SRC_RISCV { set_global_assignment -name SYSTEMVERILOG_FILE $sv_file -remove }
        foreach sv_file $SRC_RISCV_REGFILE_FPGA { set_global_assignment -name SYSTEMVERILOG_FILE $sv_file -remove }
    } else {
        foreach sv_file $SRC_ZERORISCY_REGFILE_FPGA { set_global_assignment -name SYSTEMVERILOG_FILE $sv_file -remove }
        foreach sv_file $SRC_ZERORISCY { set_global_assignment -name SYSTEMVERILOG_FILE $sv_file -remove }
        foreach sv_file $SRC_RISCV { set_global_assignment -name SYSTEMVERILOG_FILE $sv_file }
        foreach sv_file $SRC_RISCV_REGFILE_FPGA { set_global_assignment -name SYSTEMVERILOG_FILE $sv_file }
    }
    foreach sv_file $SRC_COMPONENTS { set_global_assignment -name SYSTEMVERILOG_FILE $sv_file }
    foreach sv_file $SRC_PULPINO { set_global_assignment -name SYSTEMVERILOG_FILE $sv_file }
    
    # Commit assignments
    export_assignments
    
    # Compile flags (append -remove to remove)
    set_global_assignment -name VERILOG_MACRO "USE_ZERO_RISCY=$::env(USE_ZERO_RISCY)"
    set_global_assignment -name VERILOG_MACRO "RISCY_RV32F=$::env(RISCY_RV32F)"
    set_global_assignment -name VERILOG_MACRO "ZERO_RV32M=$::env(ZERO_RV32M)"
    set_global_assignment -name VERILOG_MACRO "ZERO_RV32E=$::env(ZERO_RV32E)"
    set_global_assignment -name VERILOG_MACRO "PULP_FPGA_EMUL=1"
    set_global_assignment -name VERILOG_MACRO "QUARTUS=1"
    set_global_assignment -name VERILOG_MACRO "RISCV"
    
    set_global_assignment -name NUM_PARALLEL_PROCESSORS 4
    
    # Synthesize design
    execute_flow -compile
    
    # Create reports and save netlist
    #TODO

    # Close project
    if {$need_to_close_project} {
        project_close
    }
}
