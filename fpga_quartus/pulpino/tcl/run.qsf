# quartus_sh -s
package require ::quartus::project
package require ::quartus::flow


# Paths
set FPGA_ROOT $::env(FPGA_ROOT)
puts "FPGA_ROOT = ${FPGA_ROOT}"
set TB ${FPGA_ROOT}/../tb
set RTL ${FPGA_ROOT}/../rtl
set IPS ${FPGA_ROOT}/../ips
set FPGA_IPS ${FPGA_ROOT}/ips
set FPGA_RTL ${FPGA_ROOT}/rtl

set need_to_close_project 0
set make_assignments 1

# Configuration
if { ![info exists ::env(USE_ZERO_RISCY)] } {
  puts "USE_ZERO_RISCY = 0"
  set ::env(USE_ZERO_RISCY) 0
} else {
  puts "USE_ZERO_RISCY = 1"
}
if { ![info exists ::env(RISCY_RV32F)] } {
  puts "RISCY_RV32F = 0"
  set ::env(RISCY_RV32F) 0
} else {
  puts "RISCY_RV32F = 1"
}
if { ![info exists ::env(ZERO_RV32M)] } {
  puts "ZERO_RV32M = 0"
  set ::env(ZERO_RV32M) 0
} else {
  puts "ZERO_RV32M = 1"
}
if { ![info exists ::env(ZERO_RV32E)] } {
  puts "ZERO_RV32E = 0"
  set ::env(ZERO_RV32E) 0
} else {
  puts "ZERO_RV32E = 1"
}

if { $::env(USE_ZERO_RISCY)==1} {
    if {$::env(ZERO_RV32E)} {
          set NAME "MICRO_RISCY"
          puts "MICRO_RISCY COMPILATION"
    } else {
          set NAME "ZERO_RISCY"
          puts "ZERO_RISCY COMPILATION"
    }
} else {
    if {$::env(RISCY_RV32F)} {
          set NAME "RISCY_FP"
          puts "RISCY_FP COMPILATION"
    } else { 
          set NAME "RISCY"
          puts "RISCY COMPILATION"
    }
}


# Check that the right project is open
if {[is_project_open]} {
  if {[string compare $quartus(project) "pulpino"]} {
    puts "Project pulpino is not open"
    set make_assignments 0
  }
} else {
  # Only open if not already open
  if {[project_exists pulpino]} {
    project_open -revision pulpino_top pulpino
  } else {
    project_new -revision pulpino_top pulpino
  }
  set need_to_close_project 1
}

# make assignments
if {$make_assignments} {
    set_global_assignment -name FAMILY "Cyclone V"
    set_global_assignment -name DEVICE 5CSEMA5F31C6
    set_global_assignment -name TOP_LEVEL_ENTITY pulpino
    set_global_assignment -name EDA_SIMULATION_TOOL "ModelSim (SystemVerilog)"
    set_global_assignment -name ORIGINAL_QUARTUS_VERSION 17.0.0
    #set_global_assignment -name PROJECT_CREATION_TIME_DATE "13:29:43  MARCH 14 2018"
    set_global_assignment -name LAST_QUARTUS_VERSION "17.0.0 Lite Edition"
    set_global_assignment -name PROJECT_OUTPUT_DIRECTORY output
    set_global_assignment -name DEVICE_FILTER_PACKAGE FBGA
    set_global_assignment -name DEVICE_FILTER_PIN_COUNT 896
    set_global_assignment -name DEVICE_FILTER_SPEED_GRADE 6
    
    source $FPGA_ROOT/pulpino/tcl/pin_assignments.tcl
    set_global_assignment -name SDC_FILE $FPGA_ROOT/pulpino/tcl/constraints.sdc
    
    # set up meaningful errors
    ##source ../common/messages.tcl
    
    # Define source files
    source $FPGA_ROOT/pulpino/tcl/src_files.tcl
    source $FPGA_ROOT/pulpino/tcl/ips_inc_dirs.tcl
    source $FPGA_ROOT/pulpino/tcl/ips_src_files.tcl

    # Add IPs and Testbench files
    source $FPGA_ROOT/pulpino/tcl/ips_add_files.tcl
    source $FPGA_ROOT/pulpino/tcl/tb_add_files.tcl
    
    # Add Pulpino files and memories
    if {$::env(USE_ZERO_RISCY)} {
        foreach sv_file $SRC_ZERORISCY_REGFILE_FPGA { set_global_assignment -name SYSTEMVERILOG_FILE $sv_file }
        foreach sv_file $SRC_ZERORISCY { set_global_assignment -name SYSTEMVERILOG_FILE $sv_file }
        foreach sv_file $SRC_RISCV { set_global_assignment -name SYSTEMVERILOG_FILE $sv_file -remove }
        foreach sv_file $SRC_RISCV_REGFILE_FPGA { set_global_assignment -name SYSTEMVERILOG_FILE $sv_file -remove }
    } else {
        foreach sv_file $SRC_ZERORISCY_REGFILE_FPGA { set_global_assignment -name SYSTEMVERILOG_FILE $sv_file -remove }
        foreach sv_file $SRC_ZERORISCY { set_global_assignment -name SYSTEMVERILOG_FILE $sv_file -remove }
        foreach sv_file $SRC_RISCV { set_global_assignment -name SYSTEMVERILOG_FILE $sv_file }
        foreach sv_file $SRC_RISCV_REGFILE_FPGA { set_global_assignment -name SYSTEMVERILOG_FILE $sv_file }
    }
    foreach sv_file $SRC_COMPONENTS { set_global_assignment -name SYSTEMVERILOG_FILE $sv_file }
    foreach sv_file $SRC_PULPINO { set_global_assignment -name SYSTEMVERILOG_FILE $sv_file }
    
    # Commit assignments
    export_assignments
    
    # Compile flags (append -remove to remove)
    set_global_assignment -name VERILOG_MACRO "USE_ZERO_RISCY=$::env(USE_ZERO_RISCY)"
    set_global_assignment -name VERILOG_MACRO "RISCY_RV32F=$::env(RISCY_RV32F)"
    set_global_assignment -name VERILOG_MACRO "ZERO_RV32M=$::env(ZERO_RV32M)"
    set_global_assignment -name VERILOG_MACRO "ZERO_RV32E=$::env(ZERO_RV32E)"
    set_global_assignment -name VERILOG_MACRO "PULP_FPGA_EMUL=1"
    set_global_assignment -name VERILOG_MACRO "QUARTUS=1"
    set_global_assignment -name VERILOG_MACRO "RISCV"
    
    set_global_assignment -name NUM_PARALLEL_PROCESSORS 4
    
    # To run quartus_map, quartus_fit, quartus_tan, quartus_asm
    # or other executables based on options. (Refer to "Using
    # Compilation Flows," "Compiling Designs," and "Specifying
    # Compiler Settings" in Quartus(R) II online Help for more
    # information.)
    execute_flow -compile

    # Create reports
    #TODO

    # Close project
    if {$need_to_close_project} {
        project_close
    }
}
